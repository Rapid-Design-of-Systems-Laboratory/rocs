function [syms_str_out] = mathematica_differentiate(syms_str_in,var)

[m,n] = size(syms_str_in);
syms_str_out = sym(nan(m,n));

for ctr1 = 1 : 1 : m
for ctr2 = 1 : 1 : n

  % Convert to Mathematica string
  integrand_math = matlab2math_str(char(syms_str_in(ctr1,ctr2)));

  
  
  
  
  % Seems that differentiation of summation of many trig functions can result in
  % differential blowing up into a huge expression. But, if differentiate each 
  % term separately, get a nice expression.
  
  % Parse string and separate + and appropriate - (subtraction of terms) with
  % spaces in front and back to denote separation in term
  % Get pairs of parenthesis
  [ind_op,ind_cp] = find_parenthesis_indices2(integrand_math);
  
  % Determine all + and - of terms if outside of all parenthesis pairs
  I_plus = strfind(integrand_math,'+');
  I_minus = strfind(integrand_math,'-');
  I_plus_minus = union(I_plus,I_minus);
  I_term_divider = [];
  for index = 1 : 1 : length(I_plus_minus)
    outside = true;
    for index2 = 1 : 1 : length(ind_op)
      if (I_plus_minus(index) > ind_op(index2)) && ...
          (I_plus_minus(index) < ind_cp(index2))
        outside = false;
      end
    end
    if outside
      I_term_divider = [I_term_divider,I_plus_minus(index)];
    end
  end
%   I_term_divider = union(I_plus,I_minus); % Automatically sorted
  I_terms = [0,I_term_divider,length(integrand_math)+1];
  
  integrand_int_math = [];
  for term_ctr = 1 : 1 : length(I_term_divider)+1
  
    integrand_term_math = ...
      integrand_math(I_terms(term_ctr)+1:I_terms(term_ctr+1)-1);
    
    if ~isempty(integrand_term_math) % Protect for leading negative sign
    
      % Differentiate in Mathematica
      integrand_term_int_math = math(['InputForm[D[', ...
        integrand_term_math,',',var,']]']);
      
      % Add parenthesis around result in case multiple terms result from
      % integration (protects if minus sign leads the multiple terms resulting
      % from the differentiation)
      integrand_term_int_math = ['(',integrand_term_int_math,')'];

      integrand_int_math = [integrand_int_math,integrand_term_int_math];
    
    end
    
    if term_ctr ~= length(I_term_divider)+1
      integrand_int_math = [integrand_int_math, ...
        integrand_math(I_term_divider(term_ctr))];
    end
    
  end
  
  
  
  
  
  
  % Differentiate in Mathematica
  integrand_int_math = math(['InputForm[D[',integrand_math,',',var,']]']);
  
  % Convert back to Matlab symbolic variables
  integrand_int_str = math2matlab_str(integrand_int_math);
  
  % Conjugates won't differentiate in Mathematica. Since use it to get real
  % component, also want real component of derivative. So, take derivative of
  % argument of conjugate.
  
  % Find open and close brackets
  [ind_op,ind_cp] = find_parenthesis_indices(integrand_int_str);
  
  k_conj = strfind(integrand_int_str,'Derivative[1][Conjugate][');
  while ~isempty(k_conj)

    % Convert string of atan - find index of start
    ind = k_conj(1);

    % Determine closing parenthesis index
    I = find(ind_op>ind+20,1); % +20 ensures go past "[" in query string above
    
    % Obtain string for differentiation
    diff_str = integrand_int_str(ind_op(I)+1:ind_cp(I)-1);
    
    % Convert to Mathematica string
    diff_str = matlab2math_str(diff_str);

    % Differentiate string
    diff_str = math(['InputForm[D[',diff_str,',',var,']]']);
    
    % Convert back to Matlab symbolic variables
    diff_str = math2matlab_str(diff_str);
    
    % Insert back into original string and modify leading characters
    integrand_int_str = [integrand_int_str(1:ind-1),'conj(', ...
      diff_str,')',integrand_int_str(ind_cp(I)+1:end)];

    % Need to reset atan string index and open and close parenthesis positions
    k_conj = strfind(integrand_int_str,'Derivative[1][Conjugate][');

    % Find open and close brackets
    [ind_op,ind_cp] = find_parenthesis_indices(integrand_int_str);

    
    syms_str_out(ctr1,ctr2) = sym(integrand_int_str);
    
  end
  
%   math('quit');
%   pause(1);
  
end
end

return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [ind_op,ind_cp] = find_parenthesis_indices(str)

% Find all bracket indices (used to determine ending of cos/sin arguments, etc)
k_op = strfind(str,'['); % open bracket
k_cp = strfind(str,']'); % close bracket

% Determine indices of matching open and close parenthesis
k_p_sort = sort([k_op,k_cp]);

ind_op = nan(1,length(k_op));
ind_cp = nan(1,length(k_cp));
ctr_op = 0; % Array counter
for ctr = 1 : 1 : length(k_p_sort)
  
  if ismember(k_p_sort(ctr),k_op)
    % Add to op index
    ctr_op = ctr_op + 1;
    ind_op(ctr_op) = k_p_sort(ctr);
  else
    % Determine corresponding array location of closing parenthesis. Start at
    % end of open parenthesis array and work backwards until find last open
    % parenthesis.
    I = find(isnan(ind_op) == 0);
    while_ctr = 0;
    while 1
      if isnan(ind_cp(I(end-while_ctr)))
        ind_cp(I(end-while_ctr)) = k_p_sort(ctr);
        break;
      else
        while_ctr = while_ctr + 1;
      end
    end
  end
  
end
  
return
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [ind_op,ind_cp] = find_parenthesis_indices2(str)

  % Find all parenthesis indices (used to determine ending of cos/sin
  % arguments, etc)
  k_op = strfind(str,'('); % open parenthesis
  k_cp = strfind(str,')'); % close parenthesis

  % Determine indices of matching open and close parenthesis
  k_p_sort = sort([k_op,k_cp]);

  ind_op = nan(1,length(k_op));
  ind_cp = nan(1,length(k_cp));
  ctr_op = 0; % Array counter
  for ctr = 1 : 1 : length(k_p_sort)

    if ismember(k_p_sort(ctr),k_op)
      % Add to op index
      ctr_op = ctr_op + 1;
      ind_op(ctr_op) = k_p_sort(ctr);
    else
      % Determine corresponding array location of closing parenthesis. Start at
      % end of open parenthesis array and work backwards until find last open
      % parenthesis.
      I = find(isnan(ind_op) == 0);
      while_ctr = 0;
      while 1
        if isnan(ind_cp(I(end-while_ctr)))
          ind_cp(I(end-while_ctr)) = k_p_sort(ctr);
          break;
        else
          while_ctr = while_ctr + 1;
        end
      end
    end

  end
  
return
  

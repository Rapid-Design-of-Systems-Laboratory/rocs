function [] = output(in,od)
%
% [] = output(in,od)
%
% This function is used to allocate memory locations for matrices and
% initialize scalar values.
%
% Input:
%   in - structure containing inputs from input deck
%   od - structure containing variables of interest during 
%                optimization
%
% Output:
%   None. Although no values are returned to a calling function, output is
%   printed to the screen and the results are stored in results.mat.
%

% Author: Michael J. Grant - NASA/JSC/DM42 in Jan. 2006


%%%%%%%%%%%%%%%%%%%%%%%%
%% Fitness Conversion %%
%%%%%%%%%%%%%%%%%%%%%%%%

% Determine iteration with best individual - choose first instance
I = min(find(od.best_fit == min(od.best_fit)));

% Obtain individual index of best solution
[temp,p] = find(od.bestSoFar(:,:,I) == min(od.best_fit));

% If performing minimization, fitness values were negated. Need to return
% fitness value to proper sign
if in.maximization
  
  od.fit = -od.fit;
  od.best_fit = -od.best_fit;
  
end

%%%%%%%%%%%%%%%%%%%%%%%%
%% Optimization Stats %%
%%%%%%%%%%%%%%%%%%%%%%%%

% Execution time
fprintf('\n\nTime elapsed: %g',od.time);

%%%%%%%%%%
%% Data %%
%%%%%%%%%%

% Output to screen
fprintf('\nBest Fitness Attained in Iteration %d out of %d',I,od.iter);
fprintf('\nBest Fitness Value: %g',od.best_fit(I));
fprintf('\nTrade Space Location:\n');
fprintf('      %g\n',od.pop(:,p,I));
fprintf('\n\n');

% Save results to binary file
save('results.mat','od','in');

return

